<?php

define('BADCAMP_DATE_FORMAT', 'D, M jS');

/**
 * Implements hook_block().
 * Adds a block with the current number of event signups.
 */
function badcamp_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks['blimp'] = array(
      'info' => t('Attendee Count'), 
    );
    $blocks['signup_form'] = array(
      'info' => t('Signup form'), 
    );
    return $blocks;
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 'blimp':
        $block = array(
          'subject' => t('Current registered Attendees'), 
          'content' => badcamp_display_block(),
        );
        break;
      case 'signup_form':
        $block = array(
          'subject' => t('Sign up for BADCamp daily events'), 
          'content' => drupal_get_form('badcamp_signup_form'),
        );
        break;
    }
    return $block;
  }
}

/**
 * Get's the signup count for a certain event, or the whole camp.
 */
function badcamp_get_signup_count($nid = NULL) {
  if ($nid != NULL) {
    $query = db_query("SELECT DISTINCT u.uid  FROM {signup_log} s_l INNER JOIN {users} u ON u.uid = s_l.uid WHERE s_l.nid = %d", $nid);
  }
  else {
    $query = db_query("SELECT DISTINCT u.uid  FROM {signup_log} s_l INNER JOIN {users} u ON u.uid = s_l.uid");
  }
  $count = count(db_result($query));
  return $count;
}

/**
 * Block view callback.
 */
function badcamp_display_block() {
  $output = '<div class="badcamp-attendee-count">' . badcamp_get_signup_count() . '</div>';
  $output .= '<div class="badcamp-attending">attending</div>';
  return $output;
}

/**
 * Implements hook_form_alter().
 */
function badcamp_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_register') {
    // Hide signup button and enable by default.
    $form['signup'][3]['#default_value'] = 1;

    // Remove all the ugly help text.
    unset($form['account']['name']['#description']);
    unset($form['account']['mail']['#description']);
    unset($form['signup']['#description']);

    // Unset unsightly fieldset labels
    unset($form['account']['#title']);
    unset($form['signup']['#title']);
    unset($form['Personal information']['#title']);
    unset($form['Volunteer']['#title']);

    // Change the order of the elements.
    $form['signup']['#weight'] = -10;
    $dates = array();
    $dates_formated = array();
    // Nodes are already loaded in signup_user.
    foreach (element_children($form['signup']) as $nid) {
      if (is_numeric($nid) && !empty($form['signup'][$nid]['#title']) && ($node = node_load($nid)) && (!empty($node->field_dates[0]['value']))) {
        $date = date_format_date($node->field_dates[0]['value'], 'custom', 'm/d/y');
        $dates_formated[$date] = date_format_date($node->field_dates[0]['value'], 'custom', BADCAMP_DATE_FORMAT);
        $dates[$date][$node->nid] = $form['signup'][$nid]['#title'];
      }
    }
    if ($dates) {
      ksort($dates_formated);
      $form['signup']['#access'] = FALSE;
      $form['badcamp_signup'] = array(
        '#type' => 'fieldset',
        '#tree' => TRUE,
        '#title' => t('Sign up for BADCamp daily events'),
        '#weight' => -10,
        '#attributes' => array(
          'id' => 'badcamp-registration-events'
        ),
      );
      foreach ($dates_formated as $date => $formated) {
        $form['badcamp_signup'][$date] = array(
          '#type' => 'radios',
          '#options' => array('' => t('None')) + $dates[$date],
          '#title' => $formated,
          // Hard coded saturday and sunday
          '#default_value' => !empty($dates[$date][3]) ? 3 : (!empty($dates[$date][490]) ? 490 : ''),
        );
        $form['#validate'][] = 'badcamp_user_register_combine_signups';
      }
    }
  }
}

/**
 * Validation form that sets the badcamp signup values to signup.
 */
function badcamp_user_register_combine_signups($form, &$form_state) {
  $signups = array();
  foreach ($form_state['values']['badcamp_signup'] as $date => $value) {
    if ($value) {
      $signups[$value] = 1;
    }
  }
  form_set_value($form['signup'], $signups, $form_state);
}


/**
 * Implements hook_signup_sign_up().
 */
function badcamp_signup_sign_up($node, $account) {
  $canceled = 0;
  $notify = arg(0) == 'node';
  if (!empty($node->field_dates[0]['value']) && $account->uid && ($date = date_format_date($node->field_dates[0]['value'], 'custom', BADCAMP_DATE_FORMAT))) {
    $result = db_query('SELECT nid, sid FROM {signup_log} WHERE uid = %d', $account->uid);
    while ($row = db_fetch_object($result)) {
      $existing_signup_node = node_load($row->nid);
      if (!empty($existing_signup_node->field_dates[0]['value']) && ($date2 = date_format_date($existing_signup_node->field_dates[0]['value'], 'custom', BADCAMP_DATE_FORMAT)) && ($date2 === $date)) {
        signup_cancel_signup($row->sid, $notify);
        $canceled++;
      }
    }
  }
  if ($canceled && $notify) {
    drupal_set_message(format_plural($canceled, 'Event canceled due to conflicting schedule', 'Events canceled due to conflicting schedule'), 'warning');
  }
}

function badcamp_signup_form() {
  global $user;
  $query = db_query(db_rewrite_sql("SELECT n.nid FROM {node} n INNER JOIN signup s on n.nid=s.nid WHERE s.status = 1 AND n.status = 1"));
  while ($nid = db_result($query)) {
    $nids[] = $nid;
  }
  // Allow other modules to alter the list of nids.
  drupal_alter('signup_user_reg_nids', $nids);
  // If there is at least one node, add the Signup fieldset.
  if (!empty($nids)) {
    // Each node gets a checkbox.
    $dates_formated = array();
    $dates = array();
    foreach ($nids as $nid) {
      if (($node = node_load($nid)) && (!empty($node->field_dates[0]['value']))) {
        $date = date_format_date($node->field_dates[0]['value'], 'custom', 'm/d/y');
        $dates_formated[$date] = date_format_date($node->field_dates[0]['value'], 'custom', BADCAMP_DATE_FORMAT);
        $dates[$date][$node->nid] = l($node->title, 'node/' . $node->nid, array('attributes' => array('target' => '_blank')));
      }
    }
    $result = db_query('SELECT nid FROM {signup_log} WHERE uid = %d', $user->uid);
    $already_signedup_for = array();
    while ($nid = db_result($result)) {
      $already_signedup_for[] = $nid;
    }
    if ($dates) {
      ksort($dates);
      $form['badcamp_signup'] = array(
        '#tree' => TRUE,
        '#attributes' => array(
          'id' => 'badcamp-registration-events'
        ),
      );
      foreach ($dates as $date => $options) {
        $form['badcamp_signup'][$date] = array(
          '#type' => 'radios',
          '#options' => array('' => t('None')) + $options,
          '#title' => $dates_formated[$date],
          '#default_value' => reset(array_intersect(array_keys($options), $already_signedup_for)),
        );
      }
      $form['#signedup_for'] = $already_signedup_for;
      // Why did putting the clear on submit not work? :(

    }
  }
  profile_load_profile($user);
  $fields = profile_form_profile((array)$user, $user, 'Personal information', TRUE);
  if (!empty($fields['Personal information']['profile_volunteer'])) {
    $form['profile_volunteer'] = $fields['Personal information']['profile_volunteer'];
  }
  $form['clear']['#value'] = '<div class="clear-block"></div>';
  $form['submit'] = array(
    '#value' => t('Signup'),
    '#type' => 'submit',
  );
  return $form;
}

/**
 * Submit callback that signs up users if not already.
 *
 * @see badcamp_signup_sign_up()
 *
 */
function badcamp_signup_form_submit($form, &$form_state) {
  global $user;
  foreach ($form_state['values']['badcamp_signup'] as $date => $nid) {
    if ($nid && !in_array($nid, $form['#signedup_for'])) {
      signup_sign_up_user(array('uid' => $user->uid, 'nid' => $nid));
    }
  }
  if ($fid = db_result(db_query('SELECT fid FROM {profile_fields} WHERE name = "profile_volunteer"'))) {
    db_query("DELETE FROM {profile_values} WHERE fid = %d AND uid = %d", $fid, $user->uid);
    db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES (%d, %d, '%s')", $fid, $user->uid, $form_state['values']['profile_volunteer']);
  }
}

