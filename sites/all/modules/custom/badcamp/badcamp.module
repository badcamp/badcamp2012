<?php

/**
 * Implements hook_block().
 * Adds a block with the current number of event signups.
 */
function badcamp_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks['blimp'] = array(
      'info' => t('Attendee Count'), 
    );
    // BLOCK_CACHE_PER_ROLE will be assumed for block 0.

    return $blocks;
  }
  else if ($op == 'view') {
    switch ($delta) {
      case 'blimp':
        // Your module will need to define this function to render the block.
        $block = array(
          'subject' => t('Current registered Attendees'), 
          'content' => badcamp_display_block(),
        );
        break;
    }
    return $block;
  }
}

/**
 * Get's the signup count for a certain event, or the whole camp.
 */
function badcamp_get_signup_count($nid = NULL) {
  if ($nid != NULL) {
    $query = db_query("SELECT DISTINCT u.uid  FROM {signup_log} s_l INNER JOIN {users} u ON u.uid = s_l.uid WHERE s_l.nid = %d", $nid);
  }
  else {
    $query = db_query("SELECT DISTINCT u.uid  FROM {signup_log} s_l INNER JOIN {users} u ON u.uid = s_l.uid");
  }
  $count = count(db_result($query));
  return $count;
}

/**
 * Block view callback.
 */
function badcamp_display_block() {
  $output = '<div class="badcamp-attendee-count">' . badcamp_get_signup_count() . '</div>';
  $output .= '<div class="badcamp-attending">attending</div>';
  return $output;
}

/**
 * Implements hook_form_alter().
 */
function badcamp_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_register') {
    // Hide signup button and enable by default.
    $form['signup'][3]['#default_value'] = 1;

    // Remove all the ugly help text.
    unset($form['account']['name']['#description']);
    unset($form['account']['mail']['#description']);
    unset($form['signup']['#description']);

    // Unset unsightly fieldset labels
    unset($form['account']['#title']);
    unset($form['signup']['#title']);
    unset($form['Personal information']['#title']);

    // Change the order of the elements.
    $form['signup']['#weight'] = -10;
    $dates = array();
    // Nodes are already loaded in signup_user.
    foreach (element_children($form['signup']) as $nid) {
      if (is_numeric($nid) && !empty($form['signup'][$nid]['#title']) && ($node = node_load($nid)) && (!empty($node->field_dates[0]['value']))) {
        $dates[date_format_date($node->field_dates[0]['value'], 'custom', 'm/d/Y')][$node->nid] = $form['signup'][$nid]['#title'];
      }
    }
    if ($dates) {
      ksort($dates);
      $form['signup']['#access'] = FALSE;
      $form['badcamp_signup'] = array(
        '#type' => 'fieldset',
        '#tree' => TRUE,
        '#weight' => 10,
        '#attributes' => array(
          'id' => 'badcamp-registration-events'
        ),
      );
      foreach ($dates as $date => $options) {
        $form['badcamp_signup'][$date] = array(
          '#type' => 'radios',
          '#options' => array('' => t('None')) + $options,
          '#title' => t('Events on @date', array('@date' => $date)),
        );
        $form['#validate'][] = 'badcamp_user_register_combine_signups';
      }
    }
  }
}

/**
 * Validation form that sets the badcamp signup values to signup.
 */
function badcamp_user_register_combine_signups($form, &$form_state) {
  $signups = array();
  foreach ($form_state['values']['badcamp_signup'] as $date => $value) {
    if ($value) {
      $signups[$value] = 1;
    }
  }
  form_set_value($form['signup'], $signups, $form_state);
}


/**
 * Implements hook_link_alter().
 */
function badcamp_signup_sign_up($node, $account) {
  $canceled = 0;
  if (!empty($node->field_dates[0]['value']) && $account->uid && ($date = date_format_date($node->field_dates[0]['value'], 'custom', 'm/d/Y'))) {
    $result = db_query('SELECT nid, sid FROM {signup_log} WHERE uid = %d', $account->uid);
    while ($row = db_fetch_object($result)) {
      $existing_signup_node = node_load($row->nid);
      if (!empty($existing_signup_node->field_dates[0]['value']) && ($date2 = date_format_date($existing_signup_node->field_dates[0]['value'], 'custom', 'm/d/Y')) && ($date2 === $date)) {
        signup_cancel_signup($row->sid);
        $canceled++;
      }
    }
  }
  if ($canceled) {
    drupal_set_message(format_plural($canceled, 'Event canceled due to conflicting schedule', 'Events canceled due to conflicting schedule'), 'warning');
  }
}
